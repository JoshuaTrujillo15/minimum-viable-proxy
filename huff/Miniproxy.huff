// EIP1967 PROXY CONTRACT

// -------------------------------------------------------------------------------------------------
// CONSTANTS

// uint256(keccak256("eip1967.proxy.implementation")) - 1
#define constant PROXY_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc

// placeholder factory address
#define constant FACTORY_PLACEHOLDER = 0xf000000000000000000000000000000000000000

#define constant ONE = 0x01
#define constant SELECTOR_LEN = 0x04
#define constant WORD_SIZE = 0x20

#define macro CONSTRUCTOR() = takes (0) returns (0) {
    // COPY CODE TO MEMORY
    __codesize(CONSTRUCTOR) // [initsize]
    dup1                    // [initsize, initsize]
    codesize                // [codesize, initsize, initsize]
    sub                     // [runtimesize, initsize]
    swap1                   // [initsize, runtimesize]
    returndatasize          // [zero, initsize, runtimesize]
    codecopy                // []

    // LOAD ARGUMENT
    __codesize(MAIN)        // [arg0offset]
    dup1                    // [arg0offset, arg0offset]
    mload                   // [arg0, arg0offset]
    [PROXY_SLOT]            // [proxy_slot, arg0, arg0offset]
    sstore                  // [arg0offset]

    // RETURN
    returndatasize          // [zero, arg0offset]
    return                  // []
}

#define macro MAIN() = takes (0) returns (0) {
    // CHECK IF CALLER IS FACTORY
    [FACTORY_PLACEHOLDER]   // [factory]
    caller                  // [caller, factory]
    eq                      // [is_factory]
    is_factory              // [is_factory_dest, is_factory]
    jumpi                   // []

    // COPY CALLDATA TO MEMORY
    calldatasize            // [calldatasize]
    returndatasize          // [zero, calldatasize]
    returndatasize          // [zero, zero, calldatasize]
    calldatacopy            // []

    // CACHE ZERO FOR AFTER DELEGATECALL
    returndatasize          // [zero]

    // DELEGATECALL
    returndatasize          // [retsize, zero]
    returndatasize          // [retoffset, retsize, zero]
    calldatasize            // [argsize, retoffset, retsize, zero]
    returndatasize          // [argoffset, argsize, retoffset, retsize, zero]
    [PROXY_SLOT]            // [proxy_slot, argoffset, argsize, retoffset, retsize, zero]
    sload                   // [impl, argoffset, argsize, retoffset, retsize, zero]
    gas                     // [gas, impl, argoffset, argsize, retoffset, retsize, zero]
    delegatecall            // [success, zero]

    // COPY RETURNDATA TO MEMORY
    returndatasize          // [retsize, success, zero]
    dup3                    // [retoffset, retsize, success, zero]
    dup1                    // [memoffset, retoffset, retsize, success, zero]
    returndatacopy          // [success, zero]

    // RETURN IF SUCCESS, ELSE BUBBLE UP ERROR
    call_success            // [call_success, success, zero]
    jumpi                   // [zero]

    // FAILED
    returndatasize          // [retsize, zero]
    swap1                   // [zero, retsize]
    revert                  // []

    // SUCCESS
    call_success:
        returndatasize      // [retsize, zero]
        swap1               // [zero, retsize]
        return              // []

    is_factory:             // []
        returndatasize      // [impl_offset]
        calldataload        // [impl_contract]
        [PROXY_SLOT]        // [proxy_slot, impl_contract]
        sstore              // []
        stop                // []
}
